# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyarmnn_caffeparser
else:
    import _pyarmnn_caffeparser

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyarmnn_caffeparser.delete_SwigPyIterator

    def value(self):
        return _pyarmnn_caffeparser.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyarmnn_caffeparser.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyarmnn_caffeparser.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyarmnn_caffeparser.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyarmnn_caffeparser.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyarmnn_caffeparser.SwigPyIterator_copy(self)

    def next(self):
        return _pyarmnn_caffeparser.SwigPyIterator_next(self)

    def __next__(self):
        return _pyarmnn_caffeparser.SwigPyIterator___next__(self)

    def previous(self):
        return _pyarmnn_caffeparser.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyarmnn_caffeparser.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyarmnn_caffeparser.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyarmnn_caffeparser.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyarmnn_caffeparser.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyarmnn_caffeparser.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyarmnn_caffeparser.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyarmnn_caffeparser.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pyarmnn_caffeparser.ios_base_erase_event
    imbue_event = _pyarmnn_caffeparser.ios_base_imbue_event
    copyfmt_event = _pyarmnn_caffeparser.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _pyarmnn_caffeparser.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _pyarmnn_caffeparser.ios_base_flags(self, *args)

    def setf(self, *args):
        return _pyarmnn_caffeparser.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _pyarmnn_caffeparser.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _pyarmnn_caffeparser.ios_base_precision(self, *args)

    def width(self, *args):
        return _pyarmnn_caffeparser.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _pyarmnn_caffeparser.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _pyarmnn_caffeparser.ios_base_imbue(self, __loc)

    def getloc(self):
        return _pyarmnn_caffeparser.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _pyarmnn_caffeparser.ios_base_xalloc()

    def iword(self, __ix):
        return _pyarmnn_caffeparser.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _pyarmnn_caffeparser.ios_base_pword(self, __ix)
    __swig_destroy__ = _pyarmnn_caffeparser.delete_ios_base

# Register ios_base in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.ios_base_swigregister(ios_base)
cvar = _pyarmnn_caffeparser.cvar
ios_base.boolalpha = _pyarmnn_caffeparser.cvar.ios_base_boolalpha
ios_base.dec = _pyarmnn_caffeparser.cvar.ios_base_dec
ios_base.fixed = _pyarmnn_caffeparser.cvar.ios_base_fixed
ios_base.hex = _pyarmnn_caffeparser.cvar.ios_base_hex
ios_base.internal = _pyarmnn_caffeparser.cvar.ios_base_internal
ios_base.left = _pyarmnn_caffeparser.cvar.ios_base_left
ios_base.oct = _pyarmnn_caffeparser.cvar.ios_base_oct
ios_base.right = _pyarmnn_caffeparser.cvar.ios_base_right
ios_base.scientific = _pyarmnn_caffeparser.cvar.ios_base_scientific
ios_base.showbase = _pyarmnn_caffeparser.cvar.ios_base_showbase
ios_base.showpoint = _pyarmnn_caffeparser.cvar.ios_base_showpoint
ios_base.showpos = _pyarmnn_caffeparser.cvar.ios_base_showpos
ios_base.skipws = _pyarmnn_caffeparser.cvar.ios_base_skipws
ios_base.unitbuf = _pyarmnn_caffeparser.cvar.ios_base_unitbuf
ios_base.uppercase = _pyarmnn_caffeparser.cvar.ios_base_uppercase
ios_base.adjustfield = _pyarmnn_caffeparser.cvar.ios_base_adjustfield
ios_base.basefield = _pyarmnn_caffeparser.cvar.ios_base_basefield
ios_base.floatfield = _pyarmnn_caffeparser.cvar.ios_base_floatfield
ios_base.badbit = _pyarmnn_caffeparser.cvar.ios_base_badbit
ios_base.eofbit = _pyarmnn_caffeparser.cvar.ios_base_eofbit
ios_base.failbit = _pyarmnn_caffeparser.cvar.ios_base_failbit
ios_base.goodbit = _pyarmnn_caffeparser.cvar.ios_base_goodbit
ios_base.app = _pyarmnn_caffeparser.cvar.ios_base_app
ios_base.ate = _pyarmnn_caffeparser.cvar.ios_base_ate
ios_base.binary = _pyarmnn_caffeparser.cvar.ios_base_binary
ios_base.ios_base_in = _pyarmnn_caffeparser.cvar.ios_base_ios_base_in
ios_base.out = _pyarmnn_caffeparser.cvar.ios_base_out
ios_base.trunc = _pyarmnn_caffeparser.cvar.ios_base_trunc
ios_base.beg = _pyarmnn_caffeparser.cvar.ios_base_beg
ios_base.cur = _pyarmnn_caffeparser.cvar.ios_base_cur
ios_base.end = _pyarmnn_caffeparser.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _pyarmnn_caffeparser.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return _pyarmnn_caffeparser.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _pyarmnn_caffeparser.ios_rdstate(self)

    def clear(self, *args):
        return _pyarmnn_caffeparser.ios_clear(self, *args)

    def setstate(self, __state):
        return _pyarmnn_caffeparser.ios_setstate(self, __state)

    def good(self):
        return _pyarmnn_caffeparser.ios_good(self)

    def eof(self):
        return _pyarmnn_caffeparser.ios_eof(self)

    def fail(self):
        return _pyarmnn_caffeparser.ios_fail(self)

    def bad(self):
        return _pyarmnn_caffeparser.ios_bad(self)

    def exceptions(self, *args):
        return _pyarmnn_caffeparser.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _pyarmnn_caffeparser.ios_swiginit(self, _pyarmnn_caffeparser.new_ios(__sb))
    __swig_destroy__ = _pyarmnn_caffeparser.delete_ios

    def tie(self, *args):
        return _pyarmnn_caffeparser.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _pyarmnn_caffeparser.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _pyarmnn_caffeparser.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _pyarmnn_caffeparser.ios_fill(self, *args)

    def imbue(self, __loc):
        return _pyarmnn_caffeparser.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _pyarmnn_caffeparser.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _pyarmnn_caffeparser.ios_widen(self, __c)

# Register ios in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.ios_swigregister(ios)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _pyarmnn_caffeparser.ostream_swiginit(self, _pyarmnn_caffeparser.new_ostream(__sb))
    __swig_destroy__ = _pyarmnn_caffeparser.delete_ostream

    def __lshift__(self, *args):
        return _pyarmnn_caffeparser.ostream___lshift__(self, *args)

    def put(self, __c):
        return _pyarmnn_caffeparser.ostream_put(self, __c)

    def write(self, __s, __n):
        return _pyarmnn_caffeparser.ostream_write(self, __s, __n)

    def flush(self):
        return _pyarmnn_caffeparser.ostream_flush(self)

    def tellp(self):
        return _pyarmnn_caffeparser.ostream_tellp(self)

    def seekp(self, *args):
        return _pyarmnn_caffeparser.ostream_seekp(self, *args)

# Register ostream in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _pyarmnn_caffeparser.istream_swiginit(self, _pyarmnn_caffeparser.new_istream(__sb))
    __swig_destroy__ = _pyarmnn_caffeparser.delete_istream

    def __rshift__(self, *args):
        return _pyarmnn_caffeparser.istream___rshift__(self, *args)

    def gcount(self):
        return _pyarmnn_caffeparser.istream_gcount(self)

    def get(self, *args):
        return _pyarmnn_caffeparser.istream_get(self, *args)

    def getline(self, *args):
        return _pyarmnn_caffeparser.istream_getline(self, *args)

    def ignore(self, *args):
        return _pyarmnn_caffeparser.istream_ignore(self, *args)

    def peek(self):
        return _pyarmnn_caffeparser.istream_peek(self)

    def read(self, __s, __n):
        return _pyarmnn_caffeparser.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _pyarmnn_caffeparser.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _pyarmnn_caffeparser.istream_putback(self, __c)

    def unget(self):
        return _pyarmnn_caffeparser.istream_unget(self)

    def sync(self):
        return _pyarmnn_caffeparser.istream_sync(self)

    def tellg(self):
        return _pyarmnn_caffeparser.istream_tellg(self)

    def seekg(self, *args):
        return _pyarmnn_caffeparser.istream_seekg(self, *args)

# Register istream in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _pyarmnn_caffeparser.iostream_swiginit(self, _pyarmnn_caffeparser.new_iostream(__sb))
    __swig_destroy__ = _pyarmnn_caffeparser.delete_iostream

# Register iostream in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.iostream_swigregister(iostream)

endl_cb_ptr = _pyarmnn_caffeparser.endl_cb_ptr
endl = _pyarmnn_caffeparser.endl
ends_cb_ptr = _pyarmnn_caffeparser.ends_cb_ptr
ends = _pyarmnn_caffeparser.ends
flush_cb_ptr = _pyarmnn_caffeparser.flush_cb_ptr
flush = _pyarmnn_caffeparser.flush
class BindingPointInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyarmnn_caffeparser.BindingPointInfo_swiginit(self, _pyarmnn_caffeparser.new_BindingPointInfo(*args))
    first = property(_pyarmnn_caffeparser.BindingPointInfo_first_get, _pyarmnn_caffeparser.BindingPointInfo_first_set)
    second = property(_pyarmnn_caffeparser.BindingPointInfo_second_get, _pyarmnn_caffeparser.BindingPointInfo_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyarmnn_caffeparser.delete_BindingPointInfo

# Register BindingPointInfo in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.BindingPointInfo_swigregister(BindingPointInfo)

class MapStringTensorShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyarmnn_caffeparser.MapStringTensorShape___nonzero__(self)

    def __bool__(self):
        return _pyarmnn_caffeparser.MapStringTensorShape___bool__(self)

    def __len__(self):
        return _pyarmnn_caffeparser.MapStringTensorShape___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyarmnn_caffeparser.MapStringTensorShape___getitem__(self, key)

    def __delitem__(self, key):
        return _pyarmnn_caffeparser.MapStringTensorShape___delitem__(self, key)

    def has_key(self, key):
        return _pyarmnn_caffeparser.MapStringTensorShape_has_key(self, key)

    def keys(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_keys(self)

    def values(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_values(self)

    def items(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_items(self)

    def __contains__(self, key):
        return _pyarmnn_caffeparser.MapStringTensorShape___contains__(self, key)

    def key_iterator(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_key_iterator(self)

    def value_iterator(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_value_iterator(self)

    def __setitem__(self, *args):
        return _pyarmnn_caffeparser.MapStringTensorShape___setitem__(self, *args)

    def asdict(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_asdict(self)

    def __init__(self, *args):
        _pyarmnn_caffeparser.MapStringTensorShape_swiginit(self, _pyarmnn_caffeparser.new_MapStringTensorShape(*args))

    def empty(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_empty(self)

    def size(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_size(self)

    def swap(self, v):
        return _pyarmnn_caffeparser.MapStringTensorShape_swap(self, v)

    def begin(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_begin(self)

    def end(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_end(self)

    def rbegin(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_rbegin(self)

    def rend(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_rend(self)

    def clear(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_clear(self)

    def get_allocator(self):
        return _pyarmnn_caffeparser.MapStringTensorShape_get_allocator(self)

    def count(self, x):
        return _pyarmnn_caffeparser.MapStringTensorShape_count(self, x)

    def erase(self, *args):
        return _pyarmnn_caffeparser.MapStringTensorShape_erase(self, *args)

    def find(self, x):
        return _pyarmnn_caffeparser.MapStringTensorShape_find(self, x)

    def lower_bound(self, x):
        return _pyarmnn_caffeparser.MapStringTensorShape_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyarmnn_caffeparser.MapStringTensorShape_upper_bound(self, x)
    __swig_destroy__ = _pyarmnn_caffeparser.delete_MapStringTensorShape

# Register MapStringTensorShape in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.MapStringTensorShape_swigregister(MapStringTensorShape)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyarmnn_caffeparser.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyarmnn_caffeparser.StringVector___nonzero__(self)

    def __bool__(self):
        return _pyarmnn_caffeparser.StringVector___bool__(self)

    def __len__(self):
        return _pyarmnn_caffeparser.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pyarmnn_caffeparser.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyarmnn_caffeparser.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyarmnn_caffeparser.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyarmnn_caffeparser.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyarmnn_caffeparser.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyarmnn_caffeparser.StringVector___setitem__(self, *args)

    def pop(self):
        return _pyarmnn_caffeparser.StringVector_pop(self)

    def append(self, x):
        return _pyarmnn_caffeparser.StringVector_append(self, x)

    def empty(self):
        return _pyarmnn_caffeparser.StringVector_empty(self)

    def size(self):
        return _pyarmnn_caffeparser.StringVector_size(self)

    def swap(self, v):
        return _pyarmnn_caffeparser.StringVector_swap(self, v)

    def begin(self):
        return _pyarmnn_caffeparser.StringVector_begin(self)

    def end(self):
        return _pyarmnn_caffeparser.StringVector_end(self)

    def rbegin(self):
        return _pyarmnn_caffeparser.StringVector_rbegin(self)

    def rend(self):
        return _pyarmnn_caffeparser.StringVector_rend(self)

    def clear(self):
        return _pyarmnn_caffeparser.StringVector_clear(self)

    def get_allocator(self):
        return _pyarmnn_caffeparser.StringVector_get_allocator(self)

    def pop_back(self):
        return _pyarmnn_caffeparser.StringVector_pop_back(self)

    def erase(self, *args):
        return _pyarmnn_caffeparser.StringVector_erase(self, *args)

    def __init__(self, *args):
        _pyarmnn_caffeparser.StringVector_swiginit(self, _pyarmnn_caffeparser.new_StringVector(*args))

    def push_back(self, x):
        return _pyarmnn_caffeparser.StringVector_push_back(self, x)

    def front(self):
        return _pyarmnn_caffeparser.StringVector_front(self)

    def back(self):
        return _pyarmnn_caffeparser.StringVector_back(self)

    def assign(self, n, x):
        return _pyarmnn_caffeparser.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pyarmnn_caffeparser.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pyarmnn_caffeparser.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pyarmnn_caffeparser.StringVector_reserve(self, n)

    def capacity(self):
        return _pyarmnn_caffeparser.StringVector_capacity(self)
    __swig_destroy__ = _pyarmnn_caffeparser.delete_StringVector

# Register StringVector in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.StringVector_swigregister(StringVector)

class ICaffeParser(object):
    r"""

    Interface for creating a parser object using Caffe (http://caffe.berkeleyvision.org/) caffemodel files.

    Parsers are used to automatically construct Arm NN graphs from model files.


    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetNetworkInputBindingInfo(self, name):
        r"""

        Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name.

        Args:
            name (str): Name of the input.

        Returns:
            tuple: (`int`, `TensorInfo`)

        """
        return _pyarmnn_caffeparser.ICaffeParser_GetNetworkInputBindingInfo(self, name)

    def GetNetworkOutputBindingInfo(self, name):
        r"""

        Retrieve binding info (layer id and `TensorInfo`) for the network output identified by the given layer name.

        Args:
            name (str): Name of the output.

        Returns:
            tuple: (`int`, `TensorInfo`)

        """
        return _pyarmnn_caffeparser.ICaffeParser_GetNetworkOutputBindingInfo(self, name)

    def __init__(self):
        _pyarmnn_caffeparser.ICaffeParser_swiginit(self, _pyarmnn_caffeparser.new_ICaffeParser())
    __swig_destroy__ = _pyarmnn_caffeparser.delete_ICaffeParser

    def CreateNetworkFromBinaryFile(self, graphFile, inputShapes, requestedOutputs):
        r"""

        Create the network from a Caffe caffemodel binary file on disk.

        Args:
            graphFile: Path to the caffe model to be parsed.
            inputShapes (tuple): (`string`, `TensorShape`) A tuple containing the input name and TensorShape information for the network.
            requestedOutputs (list): A list of the output tensor names.

        Returns:
            INetwork: INetwork object for the parsed Caffe model.

        """
        return _pyarmnn_caffeparser.ICaffeParser_CreateNetworkFromBinaryFile(self, graphFile, inputShapes, requestedOutputs)

# Register ICaffeParser in _pyarmnn_caffeparser:
_pyarmnn_caffeparser.ICaffeParser_swigregister(ICaffeParser)



