{"demos":[{
    "Multimedia":[{
        "GStreamer":[{
            "name": "Video test source",
            "executable": "gst-launch-1.0 videotestsrc ! imxvideoconvert_g2d ! waylandsink window-width=480 window-height=360",
            "source": "",
            "icon": "photo-video-solid.svg",
            "screenshot": "gst_test_src_screenshot.png",
            "compatible": "imx7ulpevk",
            "description": "This is a simple GStreamer pipeline able to play the Video Test Source example: gst-launch-1.0 videotestsrc ! imxvideoconvert_g2d ! waylandsink window-width=480 window-height=360"
        },{
            "name": "Video test source",
            "executable": "gst-launch-1.0 videotestsrc ! video/x-raw, width=1280,height=720 ! glimagesink",
            "source": "",
            "icon": "photo-video-solid.svg",
            "screenshot": "gst_test_src_screenshot.png",
            "compatible": "imx8qxpc0mek, imx8qmmek, imx8mqevk, imx8mmevk, imx8mnevk, imx8mpevk",
            "description": "This is a simple GStreamer pipeline able to create a video playback with the Video Test Source example. This pipeline limits the video screen to HD resolution: gst-launch-1.0 videotestsrc ! video/x-raw,width=1280,height=720 ! glimagesink"
        },{
            "name": "Camera Preview",
            "executable": "gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=1280,height=720 ! queue ! glimagesink",
            "source": "",
            "icon": "photo-video-solid.svg",
            "screenshot": "gst_camera_preview_screenshot.png",
            "compatible": "imx8qxpc0mek, imx8qmmek, imx8mqevk, imx8mmevk, imx8mnevk",
            "description": "This is a simple GStreamer pipeline able to create a camera preview example. Note that this example only works with the correct DTS file and needs a IMXTOCSI acessory connected to the board: gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=1280,height=720 ! queue ! glimagesink"
        },{
            "name": "Camera Preview",
            "executable": "python3 /home/root/.nxp-demo-experience/scripts/multimedia/gstreamer/imx8mp_camera_demo.py --open_cam=True",
            "source": "",
            "icon": "photo-video-solid.svg",
            "screenshot": "gst_camera_preview_screenshot.png",
            "compatible": "imx8mpevk",
            "description": "This is a simple GStreamer pipeline able to create a camera preview example."
        },{
            "name": "Camera using VPU",
            "executable": "python3 /home/root/.nxp-demo-experience/scripts/multimedia/gstreamer/imx8mp_camera_demo.py --vpu_enc=True",
            "source": "",
            "icon": "photo-video-solid.svg",
            "screenshot": "gst_camera_preview_screenshot.png",
            "compatible": "imx8mpevk",
            "description": "This is a GStreamer pipeline able to create a camera preview example using VPU to encode and decode the image."
        },{
            "name": "Multi Cameras Preview",
            "executable": "python3 /home/root/.nxp-demo-experience/scripts/multimedia/gstreamer/imx8mp_camera_demo.py --multi_cam=True",
            "source": "",
            "icon": "photo-video-solid.svg",
            "screenshot": "gst_camera_preview_screenshot.png",
            "compatible": "imx8mpevk",
            "description": "This is a GStreamer pipeline able to create a camera preview example using a Basler camera and an OV5640 camera simultaneously."
        }],
        "Audio":[{
            "name": "Audio Record",
            "executable": "/home/root/.nxp-demo-experience/scripts/audio/audio_playback/audio_record.sh",
            "source": "",
            "icon": "volume-up-solid.svg",
            "screenshot": "",
            "compatible": "imx7ulpevk",
            "description": "This test records an audio file from Headphone input with a 10 second duration. Make sure a Headphone is connected to the board."
        },
        {
            "name": "Audio Play",
            "executable": "/home/root/.nxp-demo-experience/scripts/audio/audio_playback/audio_play.sh",
            "source": "",
            "icon": "volume-up-solid.svg",
            "screenshot": "",
            "compatible": "imx7ulpevk",
            "description": "This test plays the audio file recorded on the 'Audio Record' test. Make sure a Headphone is connected to the board. Need to run the 'Audio Record' test first."
        }]
    }]
    },
    {"GPU":[{
        "OpenVG 2D":[{
            "name": "Tiger G2D",
            "executable": "/opt/viv_samples/tiger/tiger",
            "source": "",
            "icon": "cube-solid.svg",
            "screenshot": "g2d_tiger_screenshot.png",
            "compatible": "imx7ulpevk, imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Vivante Tiger G2D, this demo shows a vector image being rotated and scaled using OpenVG."
        }],
        "GLES2":[{
            "name": "Vivante Launcher",
            "executable": "/opt/viv_samples/es20/vv_launcher/vv_launcher",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "vivante_vv_laucher.png",
            "compatible": "imx7ulpevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Vivante launcher demo."
        },
        {
            "name": "Cover Flow",
            "executable": "/home/root/.nxp-demo-experience/scripts/opengl/vivante_cover_flow.sh",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "vivante_cover_flow.png",
            "compatible": "imx7ulpevk",
            "description": "Vivante Cover Flow demo."
        },
        {
            "name": "Vivante Tutorial",
            "executable": "/home/root/.nxp-demo-experience/scripts/opengl/vivante_tutorial7.sh",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "vivante_tutorial7.png",
            "compatible": "imx7ulpevk",
            "description": "Vivante OpenGL tutorial"
        },
        {
            "name": "Bloom",
            "executable": "/opt/imx-gpu-sdk/GLES2/Bloom/GLES2.Bloom_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "bloom.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "An example of how to create a bloom effect. The idea is not to create the most accurate bloom, but something that is fairly fast to render. Instead of increasing the kernal size to get a good blur we do a fairly fast approximation by downscaling the original image to multiple smaller render-targets and then blurring these using a relative small kernel and then finally rescaling the result to the original size."
        },
        {
            "name": "Bloom",
            "executable": "/opt/imx-gpu-sdk/GLES2/Bloom/GLES2.Bloom_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "bloom.jpg",
            "compatible": "imx7ulpevk",
            "description": "An example of how to create a bloom effect. The idea is not to create the most accurate bloom, but something that is fairly fast to render. Instead of increasing the kernal size to get a good blur we do a fairly fast approximation by downscaling the original image to multiple smaller render-targets and then blurring these using a relative small kernel and then finally rescaling the result to the original size."
        },
        {
            "name": "Blur",
            "executable": "/opt/imx-gpu-sdk/GLES2/Blur/GLES2.Blur_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "blur.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Uses the two pass linear technique and further reduces the bandwidth requirement by downscaling the 'source image' to 1/4 its size (1/2w x 1/2h) before applying the blur and and then upscaling the blurred image to provide the final image. This works well for large kernel sizes and relatively high sigma's but the downscaling produces visible artifacts with low sigma's."
        },
        {
            "name": "Blur",
            "executable": "/opt/imx-gpu-sdk/GLES2/Blur/GLES2.Blur_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "blur.jpg",
            "compatible": "imx7ulpevk",
            "description": "Uses the two pass linear technique and further reduces the bandwidth requirement by downscaling the 'source image' to 1/4 its size (1/2w x 1/2h) before applying the blur and and then upscaling the blurred image to provide the final image. This works well for large kernel sizes and relatively high sigma's but the downscaling produces visible artifacts with low sigma's."
        },
        {
            "name": "DFGraphicsBasic2D",
            "executable": "/opt/imx-gpu-sdk/GLES2/DFGraphicsBasic2D/GLES2.DFGraphicsBasic2D_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "dfgraphicsbasic2d.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Shows how to use the Demo Frameworks 'basic' 2d rendering capabilities that work across all backends. The basic2D interface allows you to render ASCII strings using a system provided font and draw colored points in batches. The functionality in Basic2D is used internally in the framework to render the profiling overlays like the frame rate counter and graphs."
        },
        {
            "name": "DFGraphicsBasic2D",
            "executable": "/opt/imx-gpu-sdk/GLES2/DFGraphicsBasic2D/GLES2.DFGraphicsBasic2D_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "dfgraphicsbasic2d.jpg",
            "compatible": "imx7ulpevk",
            "description": "Shows how to use the Demo Frameworks 'basic' 2d rendering capabilities that work across all backends. The basic2D interface allows you to render ASCII strings using a system provided font and draw colored points in batches. The functionality in Basic2D is used internally in the framework to render the profiling overlays like the frame rate counter and graphs."
        },
        {
            "name": "DFSimpleUI100",
            "executable": "/opt/imx-gpu-sdk/GLES2/DFSimpleUI100/GLES2.DFSimpleUI100_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "dfsimpleui100.jpg",
            "compatible": "imx7ulpevk",
            "description": "A very basic example of how to utilize the DemoFramework's UI library. The sample displays four buttons and reacts to clicks. The UI framework that makes it easy to get a basic UI up and running. The main UI code is API independent. It is not a show case of how to render a UI fast but only intended to allow you to quickly get a UI ready that is good enough for a demo. "
        },
        {
            "name": "DFSimpleUI100",
            "executable": "/opt/imx-gpu-sdk/GLES2/DFSimpleUI100/GLES2.DFSimpleUI100_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "dfsimpleui100.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "A very basic example of how to utilize the DemoFramework's UI library. The sample displays four buttons and reacts to clicks. The UI framework that makes it easy to get a basic UI up and running. The main UI code is API independent. It is not a show case of how to render a UI fast but only intended to allow you to quickly get a UI ready that is good enough for a demo. "
        },
        {
            "name": "EightLayerBlend",
            "executable": "/opt/imx-gpu-sdk/GLES2/EightLayerBlend/GLES2.EightLayerBlend_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "eightlayerblend.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Creates a simple parallax scrolling effect by blending eight 32 bit per pixel 1080p layers on top of each other. This is not the most optimal way to do it as it uses eight passes. But it does provide a good example of the worst case bandwidth use for the operation. The demo was created to compare GLES to the G2D eight blend blit functionality."
        },
        {
            "name": "EightLayerBlend",
            "executable": "/opt/imx-gpu-sdk/GLES2/EightLayerBlend/GLES2.EightLayerBlend_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "eightlayerblend.jpg",
            "compatible": "imx7ulpevk",
            "description": "Creates a simple parallax scrolling effect by blending eight 32 bit per pixel 1080p layers on top of each other. This is not the most optimal way to do it as it uses eight passes. But it does provide a good example of the worst case bandwidth use for the operation. The demo was created to compare GLES to the G2D eight blend blit functionality."
        },
        {
            "name": "FractalShader",
            "executable": "/opt/imx-gpu-sdk/GLES2/FractalShader/GLES2.FractalShader_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "fractalshader.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Can render both the julia and mandelbrot set using a fragment shader. This demo was used to demonstrates GPU shader performance by using up roughly 515 instructions to render each fragment while generating the julia set. It uses no textures, has no overdraw and has a minimal bandwidth requirement."
        },
        {
            "name": "FractalShader",
            "executable": "/opt/imx-gpu-sdk/GLES2/FractalShader/GLES2.FractalShader_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "fractalshader.jpg",
            "compatible": "imx7ulpevk",
            "description": "Can render both the julia and mandelbrot set using a fragment shader. This demo was used to demonstrates GPU shader performance by using up roughly 515 instructions to render each fragment while generating the julia set. It uses no textures, has no overdraw and has a minimal bandwidth requirement."
        },
        {
            "name": "LineBuilder101",
            "executable": "/opt/imx-gpu-sdk/GLES2/LineBuilder101/GLES2.LineBuilder101_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "linebuilder101.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "A simple example of dynamic line rendering using the LineBuilder helper class. The line builder has 'Add' methods for most FslBase.Math classes like BoundingBox, BoundingSphere, BoundingFrustrum, Ray, etc."
        },
        {
            "name": "LineBuilder101",
            "executable": "/opt/imx-gpu-sdk/GLES2/LineBuilder101/GLES2.LineBuilder101_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "linebuilder101.jpg",
            "compatible": "imx7ulpevk",
            "description": "A simple example of dynamic line rendering using the LineBuilder helper class. The line builder has 'Add' methods for most FslBase.Math classes like BoundingBox, BoundingSphere, BoundingFrustrum, Ray, etc."
        },
        {
            "name": "Model Loader",
            "executable": "/opt/imx-gpu-sdk/GLES2/ModelLoaderBasics/GLES2.ModelLoaderBasics_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "modelloaderbasics.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Demonstrates how to use the FslSceneImporter and Assimp to load a scene and render it using OpenGLES2. The model is rendered using a simple per pixel directional light shader."
        },
        {
            "name": "Model Loader",
            "executable": "/opt/imx-gpu-sdk/GLES2/ModelLoaderBasics/GLES2.ModelLoaderBasics_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "object-group-regular.svg",
            "screenshot": "modelloaderbasics.jpg",
            "compatible": "imx7ulpevk",
            "description": "Demonstrates how to use the FslSceneImporter and Assimp to load a scene and render it using OpenGLES2. The model is rendered using a simple per pixel directional light shader."
        },
        {
            "name": "S03_Transform",
            "executable": "/opt/imx-gpu-sdk/GLES2/S03_Transform/GLES2.S03_Transform_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s03_transform.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "Renders a animated vertex colored triangle. This shows how to modify the model matrix to rotate a triangle and how to utilize demoTime.DeltaTime to do frame rate independent animation."
        },
        {
            "name": "S03_Transform",
            "executable": "/opt/imx-gpu-sdk/GLES2/S03_Transform/GLES2.S03_Transform_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s03_transform.jpg",
            "compatible": "imx7ulpevk",
            "description": "Renders a animated vertex colored triangle. This shows how to modify the model matrix to rotate a triangle and how to utilize demoTime.DeltaTime to do frame rate independent animation."
        },
        {
            "name": "S04_Projection",
            "executable": "/opt/imx-gpu-sdk/GLES2/S04_Projection/GLES2.S04_Projection_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s04_projection.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "This example shows how to: - Build a perspective projection matrix - Render two simple 3d models using frame rate independent animation."
        },
        {
            "name": "S04_Projection",
            "executable": "/opt/imx-gpu-sdk/GLES2/S04_Projection/GLES2.S04_Projection_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s04_projection.jpg",
            "compatible": "imx7ulpevk",
            "description": "This example shows how to: - Build a perspective projection matrix - Render two simple 3d models using frame rate independent animation."
        },
        {
            "name": "S06_Texturing",
            "executable": "/opt/imx-gpu-sdk/GLES2/S06_Texturing/GLES2.S06_Texturing_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s06_texturing.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "This example shows how to use the Texture class to use a texture in a cube. It also shows you how to use the ContentManager service to load a 'png' file from the Content directory into a bitmap utility class which is then used to used to create a OpenGL ES texture."
        },
        {
            "name": "S06_Texturing",
            "executable": "/opt/imx-gpu-sdk/GLES2/S06_Texturing/GLES2.S06_Texturing_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s06_texturing.jpg",
            "compatible": "imx7ulpevk",
            "description": "This example shows how to use the Texture class to use a texture in a cube. It also shows you how to use the ContentManager service to load a 'png' file from the Content directory into a bitmap utility class which is then used to used to create a OpenGL ES texture."
        },
        {
            "name": "Mapping",
            "executable": "/opt/imx-gpu-sdk/GLES2/S07_EnvironmentMapping/GLES2.S07_EnvironmentMapping_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s07_environmentmapping.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "This sample shows how to use a cubemap texture to simulate a reflective material. It also shows you how to use the ContentManager service to load a 'dds' file from the Content directory into a Texture utility class which is then used to used to create a OpenGL ES cubemap texture."
        },
        {
            "name": "Mapping",
            "executable": "/opt/imx-gpu-sdk/GLES2/S07_EnvironmentMapping/GLES2.S07_EnvironmentMapping_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s07_environmentmapping.jpg",
            "compatible": "imx7ulpevk",
            "description": "This sample shows how to use a cubemap texture to simulate a reflective material. It also shows you how to use the ContentManager service to load a 'dds' file from the Content directory into a Texture utility class which is then used to used to create a OpenGL ES cubemap texture."
        },
        {
            "name": "Mapping Refraction",
            "executable": "/opt/imx-gpu-sdk/GLES2/S08_EnvironmentMappingRefraction/GLES2.S08_EnvironmentMappingRefraction_Wayland --Window [0,0,1280,720]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s08_environmentmappingrefraction.jpg",
            "compatible": "imx8mqevk, imx8mmevk, imx8mnevk, imx8qxpc0mek, imx8qmmek, imx8mpevk",
            "description": "This sample is a variation from the previous sample, again, a cubemap texture is used, but this time instead of simulating a reflective material a refractive material is simulated. It also shows you how to use the ContentManager service to load a 'dds' file from the Content directory into a Texture utility class which is then used to used to create a OpenGL ES cubemap texture."
        },
        {
            "name": "Mapping Refraction",
            "executable": "/opt/imx-gpu-sdk/GLES2/S08_EnvironmentMappingRefraction/GLES2.S08_EnvironmentMappingRefraction_Wayland --Window [0,0,480,360]",
            "source": "",
            "icon": "cubes-solid.svg",
            "screenshot": "s08_environmentmappingrefraction.jpg",
            "compatible": "imx7ulpevk",
            "description": "This sample is a variation from the previous sample, again, a cubemap texture is used, but this time instead of simulating a reflective material a refractive material is simulated. It also shows you how to use the ContentManager service to load a 'dds' file from the Content directory into a Texture utility class which is then used to used to create a OpenGL ES cubemap texture."
        }]
    }]
    },
    {"QT5":[{
        "OpenGL":[{
            "name": "Qt5 Cube",
            "executable": "/usr/share/qt5/examples/opengl/cube/cube --platform wayland-egl",
            "source": "https://doc.qt.io/qt-5/qtopengl-cube-example.html",
            "icon": "desktop-solid.svg",
            "screenshot": "qt5_opengl_cube.png",
            "compatible": "imx7ulpevk",
            "description": "The Cube OpenGL ES 2.0 example shows how to write mouse rotateable textured 3D cube using OpenGL ES 2.0 with Qt. It shows how to handle polygon geometries efficiently and how to write simple vertex and fragment shader for programmable graphics pipeline. In addition it shows how to use quaternions for representing 3D object orientation."
        },
        {
            "name": "Q5 Hello GL2",
            "executable": "/usr/share/qt5/examples/opengl/hellowindow/hellowindow --platform wayland-egl",
            "source": "https://doc.qt.io/qt-5/qtopengl-hellogl2-example.html",
            "icon": "desktop-solid.svg",
            "screenshot": "qt5_opengl_hellowindow.png",
            "compatible": "imx7ulpevk",
            "description": "The Hello GL2 example demonstrates the basic use of the OpenGL-related classes provided with Qt."
        }],
        "Qt Quick":[{
            "name": "QT5 Everywhere",
            "executable": "/usr/share/qt5everywheredemo-1.0/QtDemo --platform wayland-egl",
            "source": "https://code.qt.io/cgit/qt-labs/qt5-everywhere-demo.git/",
            "icon": "photo-video-solid.svg",
            "screenshot": "qt5everywhere.png",
            "compatible": "imx7ulpevk",
            "description": "QT5 Demo Launcher."
        },
        {
            "name": "Same Game",
            "executable": "/usr/share/qt5/examples/quick/demos/samegame/samegame --platform wayland-egl",
            "source": "https://doc.qt.io/qt-5/qtdoc-demos-samegame-example.html",
            "icon": "photo-video-solid.svg",
            "screenshot": "qt5_quick_samegame.png",
            "compatible": "imx7ulpevk",
            "description": "A QML implementation of the popular puzzle game by Kuniaki Moribe. Same Game demonstrates a QML game with custom types and logic written in JavaScript. The game uses various Qt Quick features such as particles, animation, and loading images."
        },
        {
            "name": "QT5 Clocks",
            "executable": "/usr/share/qt5/examples/quick/demos/clocks/clocks --platform wayland-egl",
            "source": "https://doc.qt.io/qt-5/qtdoc-demos-clocks-example.html",
            "icon": "photo-video-solid.svg",
            "screenshot": "qt5_quick_clocks.png",
            "compatible": "imx7ulpevk",
            "description": "A QML clock application that demonstrates using a ListView type to display data generated by a ListModel and a SpringAnimation type to animate images."
        }]
    }]
    },
    {"Machine Learning":[{
        "pyeIQ":[{
            "name": "Switch Image",
            "executable": "python3 /home/root/.nxp-demo-experience/scripts/machine_learning/pyeiq_switch_image.py",
            "compatible": "imx8mpevk",
            "description": "A object classification application whose inference can be done either by the CPU ou the NPU to compare the performance of each core."
        }]
    }]
    }
]}
